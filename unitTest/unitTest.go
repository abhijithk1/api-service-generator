package unit_test

var (
	apiPath = "%s/api/v1/%s/"
	MocksPath = ""
)
func Mock() {

}

func unitTestAPI() {

}

const controllerTestContent = ` // Generated By API Service Generator

package {{.Package}}

import (
	"database/sql"
	"errors"
	"example/{{.WrkDir}}/mocks"
	"example/{{.WrkDir}}/pkg/db"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func TestMain(m *testing.M) {
	os.Exit(m.Run())
}

func TestResourceHandlers(t *testing.T) {
	// Create a mock service
	mockService := mocks.NewMockService()
	expectedResult := []db.{{.APIGroupTitle}}{
		{ID: 1, Name: sql.NullString{String: "Test1", Valid: true}},
		{ID: 2, Name: sql.NullString{String: "Test2", Valid: true}},
	}
	
	mockService.On("GetDummy", mock.Anything).Return(expectedResult, nil)

	// Set up the Gin router
	router := gin.Default()
	ResourceHandler(router.Group("/"), mockService)

	// Create a test HTTP request
	w := httptest.NewRecorder()
	req, _ := http.NewRequest("GET", "/{{.Package}}", nil)

	// Perform the request
	router.ServeHTTP(w, req)

	// Assertions
	assert.Equal(t, http.StatusOK, w.Code)
	mockService.AssertExpectations(t)
}
func TestGetDummy(t *testing.T) {
	// Create a mock service
	mockService := mocks.NewMockService()
	expectedResult := []db.ApiTable{
		{ID: 1, Name: sql.NullString{String: "Test1", Valid: true}},
		{ID: 2, Name: sql.NullString{String: "Test2", Valid: true}},
	}
	
	mockService.On("GetDummy", mock.Anything).Return(expectedResult, nil)

	// Create the handler with the mock service
	resource := New{{.APIName}}Resource(mockService)

	// Set up a Gin router and recorder
	router := gin.Default()
	router.GET("/{{.Package}}", resource.GetDummy)

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("GET", "/{{.Package}}", nil)

	// Perform the request
	router.ServeHTTP(w, req)

	// Assertions
	assert.Equal(t, http.StatusOK, w.Code)
	mockService.AssertExpectations(t)
}

func TestGetDummy_Error(t *testing.T) {
	// Create a mock service
	mockService := mocks.NewMockService()
	expectedError := errors.New("database error")
	mockService.On("GetDummy", mock.Anything).Return([]db.ApiTable{}, expectedError)

	// Create the handler with the mock service
	resource := NewDummyResource(mockService)

	// Set up a Gin router and recorder
	router := gin.Default()
	router.GET("/dummy", resource.GetDummy)

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("GET", "/dummy", nil)

	// Perform the request
	router.ServeHTTP(w, req)

	// Assertions
	assert.Equal(t, http.StatusInternalServerError, w.Code)
	mockService.AssertExpectations(t)
}
`

func createControllerTestFIle() {

}

func createserviceTestFile() {

}

func mockService() {

}

func mockQueries() {

}