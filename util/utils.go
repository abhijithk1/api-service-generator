package util

import (
	"fmt"

	"github.com/abhijithk1/api-service-generator/common"
)

var (
	UtilPath = "%s/utils/"
)


func SetUtils(wrkDir string) {
	err := createConfigFile(wrkDir)
	if err != nil {
		fmt.Println("Error : ", err)
		return
	}

	err = createUtilsFile(wrkDir)
	if err != nil {
		fmt.Println("Error : ", err)
		return
	}

}


const configContent = `// Generated By API Service Generator
package util

import (
	"github.com/spf13/viper"
)

// Config stores all configuration for the application
// The values are read by viper from the configuration
type Config struct {
	DBDriver               string ` + "`mapstructure:\"DB_DRIVER\"`" + `
	DBSource               string ` + "`mapstructure:\"DB_SOURCE\"`" + `
	SECURE                 bool   ` + "`mapstrucure:\"SECURE\"`" + `
	AUTH                   string ` + "`mapstructure:\"AUTH\"`" + `
}

var vpr = viper.ReadInConfig

func LoadConfig(path string) (config Config, err error) {
	viper.AddConfigPath(path)
	viper.SetConfigName("app")
	viper.SetConfigType("env")

	viper.AutomaticEnv()
	err = vpr()
	if err != nil {
		return
	}
	err = viper.Unmarshal(&config)
	return
}
`
func createConfigFile(wrkDir string) error {
	filePathName := fmt.Sprintf(UtilPath, wrkDir) + "config.go"
	return common.CreateFileAndItsContent(filePathName, nil, configContent)
}

const utilContent = `// Generated By API Service Generator
package util

import "github.com/IBM/alchemy-logging/src/go/alog"

var ch = alog.UseChannel("UTIL")

var config Config
var err error

func init() {
	initializeAppConfig()
}

func initializeAppConfig() {
	configPaths := []string{".", "../", "../../"}

	for _, path := range configPaths {
		config, err = LoadConfig(path)
		if err == nil {
			break
		}
	}

	if config.DBSource == "" {
		panic("Failed to load application configuration.")
	}
}

func GetAppConfig() Config {
	return config
}
`

func createUtilsFile(wrkDir string) error {
	filepathName := fmt.Sprintf(UtilPath, wrkDir) + "utils.go"
	return common.CreateFileAndItsContent(filepathName, nil, utilContent)
}
