package mw

import (
	"fmt"

	"github.com/abhijithk1/api-service-generator/common"
)

var (
	CorsPath = "%s/api/v1/mw/cors"
	AuthPath = "%s/api/v1/mw/auth"
)

func SetupMiddleWare(wrkDir string) (err error) {
	err = createCorsMiddleWare(wrkDir)
	if err != nil {
		return
	}

	err = createAuthMiddleWare(wrkDir)
	if err != nil {
		return
	}

	return nil
}

const corsMiddleWare = `// Generated By API Service Generator
package cors

import (
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
)

func CORSMiddleware() gin.HandlerFunc {
	return cors.New(cors.Config{
		AllowMethods:     []string{"GET", "POST", "OPTIONS", "PUT","DELETE"},
		AllowHeaders:     []string{"Origin", "Content-Length", "Content-Type", "User-Agent", "Referrer", "Host", "Token","Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		AllowAllOrigins:  false,
		AllowOriginFunc:  func(origin string) bool { return true },
		MaxAge:           86400,
	})
}
`

func createCorsMiddleWare(wrkDir string) error {
	fileName := fmt.Sprintf(CorsPath, wrkDir) + "cors.go"
	return common.CreateFileAndItsContent(fileName, nil,corsMiddleWare)
}

const authMiddleWare = `// Generated By API Service Generator
package auth

import (
	"errors"
	"net/http"

	"github.com/IBM/alchemy-logging/src/go/alog"
	"github.com/gin-gonic/gin"
	"{{.GoModule}}/{{.WrkDir}}/utils"
)

const (
	AuthorizationKey          = "authorization"
)

var ch = alog.UseChannel("MAIN")

func AuthMiddleware() gin.HandlerFunc {
	return func(ctx *gin.Context) {

		token := ctx.GetHeader(AuthorizationKey)
		// check authorization key
		useAuth := util.GetAppConfig().AUTH
		if len(token) < 30 {
			if useAuth == "false" {
				ch.Log(alog.ERROR, "Authorization False")
				return
			}
			err := errors.New("No authorization key provided")
			ctx.AbortWithStatusJSON(http.StatusUnauthorized, ErrorResponse(err))
			return
		}
		ctx.Next()
	}
}

func ErrorResponse(err error) gin.H {
	return gin.H{"error": err.Error()}
}
`

func createAuthMiddleWare(wrkDir string) error {
	fileName := fmt.Sprintf(AuthPath, wrkDir) + "auth.go"
	return common.CreateFileAndItsContent(fileName, nil, authMiddleWare)
}
